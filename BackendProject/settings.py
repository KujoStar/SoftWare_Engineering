"""
Django settings for BackendProject project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
import toml
from pathlib import Path


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-u3hmzfkdmru70zuqraz#!5u)bjc@oc3ssy&irszbc56kovl90b'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False if os.getenv("DEPLOY") else True

ALLOWED_HOSTS = [
    '*'
]


# Application definition

INSTALLED_APPS = [
    'UsersApp',
    'ImagesApp',
    'SocialApp',
    'SearchApp',
    'MessageApp',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # 'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'BackendProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'BackendProject.wsgi.application'


# Database and Object Storage and Other Configurations

if os.getenv("UNIT_TEST"):
    # Configurations below only used in CI test
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('TEST_DB_NAME'),
            'USER': os.getenv('TEST_DB_USER'),
            'PASSWORD': os.getenv('TEST_DB_PASSWORD'),
            'HOST': os.getenv('TEST_DB_HOST'),
            'PORT': os.getenv('TEST_DB_PORT'),
        }
    }

    MAIL_HOST = os.getenv('TEST_MAIL_HOST')
    MAIL_USER = os.getenv('TEST_MAIL_USER')
    MAIL_PASSWORD = os.getenv('TEST_MAIL_PASSWORD')
    MAIL_SENDER = os.getenv('TEST_MAIL_SENDER')

    # Object Storage
    COS_DB_NAME = os.getenv('TEST_COS_DB_NAME')
    COS_SECRET_ID = os.getenv('TEST_COS_SECRET_ID')
    COS_SECRET_KEY = os.getenv('TEST_COS_SECRET_KEY')
    COS_REGION = os.getenv('TEST_COS_REGION')
    COS_APP_ID = os.getenv('TEST_COS_APP_ID')
    if COS_DB_NAME == "test":
        GIF_BUCKET, JPEG_BUCKET, PNG_BUCKET = f"test-gifs-{COS_APP_ID}", f"test-jpegs-{COS_APP_ID}", f"test-pngs-{COS_APP_ID}"
        ROUGH_GIF_BUCKET, ROUGH_JPEG_BUCKET, ROUGH_PNG_BUCKET = \
            f"test-rough-gifs-{COS_APP_ID}", f"test-rough-jpegs-{COS_APP_ID}", f"test-rough-pngs-{COS_APP_ID}"
        CONVERT_BUCKET, RESOLUTION_BUCKET, WATERMARK_BUCKET = \
            f"test-conversions-{COS_APP_ID}", f"test-resolutions-{COS_APP_ID}", f"test-watermarks-{COS_APP_ID}"
    else:
        GIF_BUCKET, JPEG_BUCKET, PNG_BUCKET = f"gifs-{COS_APP_ID}", f"jpegs-{COS_APP_ID}", f"pngs-{COS_APP_ID}"
        ROUGH_GIF_BUCKET, ROUGH_JPEG_BUCKET, ROUGH_PNG_BUCKET = f"rough-gifs-{COS_APP_ID}", f"rough-jpegs-{COS_APP_ID}", f"rough-pngs-{COS_APP_ID}"
        CONVERT_BUCKET, RESOLUTION_BUCKET, WATERMARK_BUCKET = f"conversions-{COS_APP_ID}", f"resolutions-{COS_APP_ID}", f"watermarks-{COS_APP_ID}"

    # Elasticsearch server
    ES_HOST = os.getenv('TEST_ES_HOST')
    ES_DB_NAME = os.getenv('TEST_ES_DB_NAME')

    # Baidu AI Token
    BAIDU_AI_TOKEN = os.getenv('TEST_BAIDU_AI_TOKEN')

    # Ed25519 Keys
    EDDSA_PRIVATE_KEY = os.getenv('TEST_EDDSA_PRIVATE_KEY')
    EDDSA_PUBLIC_KEY = os.getenv('TEST_EDDSA_PUBLIC_KEY')

else:
    config = toml.load(str(BASE_DIR) + '/configs/config.toml')
    pg_config = config['pgsql']
    cos_config = config['cos']
    mail_config = config['mail']
    es_config = config['elasticsearch']
    baiduai_config = config['baiduai']

    # Database
    # https://docs.djangoproject.com/en/4.1/ref/settings/#databases
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': pg_config['db_name'],
            'USER': pg_config['user'],
            'PASSWORD': pg_config['password'],
            'HOST': pg_config['host'],
            'PORT': pg_config['port'],
        }
    }

    # Email server
    MAIL_HOST = mail_config['host']
    MAIL_USER = mail_config['user']
    MAIL_PASSWORD = mail_config['password']
    MAIL_SENDER = mail_config['sender']

    # Object Storage
    COS_DB_NAME = cos_config['db_name']
    COS_SECRET_ID = cos_config['secret_id']
    COS_SECRET_KEY = cos_config['secret_key']
    COS_REGION = cos_config['region']
    COS_APP_ID = cos_config['app_id']
    if COS_DB_NAME == "test":
        GIF_BUCKET, JPEG_BUCKET, PNG_BUCKET = f"test-gifs-{COS_APP_ID}", f"test-jpegs-{COS_APP_ID}", f"test-pngs-{COS_APP_ID}"
        ROUGH_GIF_BUCKET, ROUGH_JPEG_BUCKET, ROUGH_PNG_BUCKET = \
            f"test-rough-gifs-{COS_APP_ID}", f"test-rough-jpegs-{COS_APP_ID}", f"test-rough-pngs-{COS_APP_ID}"
        CONVERT_BUCKET, RESOLUTION_BUCKET, WATERMARK_BUCKET = \
            f"test-conversions-{COS_APP_ID}", f"test-resolutions-{COS_APP_ID}", f"test-watermarks-{COS_APP_ID}"
    else:
        GIF_BUCKET, JPEG_BUCKET, PNG_BUCKET = f"gifs-{COS_APP_ID}", f"jpegs-{COS_APP_ID}", f"pngs-{COS_APP_ID}"
        ROUGH_GIF_BUCKET, ROUGH_JPEG_BUCKET, ROUGH_PNG_BUCKET = f"rough-gifs-{COS_APP_ID}", f"rough-jpegs-{COS_APP_ID}", f"rough-pngs-{COS_APP_ID}"
        CONVERT_BUCKET, RESOLUTION_BUCKET, WATERMARK_BUCKET = f"conversions-{COS_APP_ID}", f"resolutions-{COS_APP_ID}", f"watermarks-{COS_APP_ID}"

    # Elasticsearch server
    ES_HOST = es_config['host']
    ES_DB_NAME = es_config['db_name']

    # Baidu AI Token
    BAIDU_AI_TOKEN = baiduai_config['access_token']

    # Ed25519 Keys
    with open(str(BASE_DIR) + "/configs/ed25519_private.pem", 'rb') as f:
        EDDSA_PRIVATE_KEY = f.read()
    with open(str(BASE_DIR) + "/configs/ed25519_public.pem", 'rb') as f:
        EDDSA_PUBLIC_KEY = f.read()


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# CORS

# CORS_ALLOW_CREDENTIALS = True

# CORS_ALLOW_ALL_ORIGINS = True

# CORS_ALLOWED_ORIGINS = [
#     'http://localhost:8000',
#     'https://localhost:8000',
#     'http://arona.NoBugNoPain.secoder.local',
#     'https://arona.NoBugNoPain.secoder.local',
#     'http://arona-NoBugNoPain.app.secoder.net',
#     'https://arona-NoBugNoPain.app.secoder.net',
# ]

# CORS_ALLOW_HEADERS = ('*')